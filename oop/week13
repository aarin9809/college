프로세스
실행 중인 하나의 프로그램(앱)
사용자가 애플리케이션을 실행하면 운영체제로부터 실행에 필요한 메모리를 할당받아 앱의 코드를 실행하는 것
하나의 프로그램이 다중 프로세스를 만들기도함

멀티 태스킹
두가지 이상의 작업을 동시에 처리하는 것.

멀티 프로세스
독립적으로 프로그램들을 실행하고 여러 가지 작업 처리
하나의 프로세스에서 오류가 발생해도 다른 프로세스에게 영향을 미치지 않는다.

멀티 스레드
한개의 프로그램을 실행하고 내부적으로 여러가지 작업 처리
thread : 한 가지 작업을 실행하기 위해 순차적으로 실행 할 코드

메인 스레드
모든 자바 프로그램은 메인 스레드가 main() 메소드 실행하며 시작.
main() 메소드의 첫 코드부터 아래로 순차적으로 실행
실행 종료조건
1) 마지막 코드 실행
2) return 문을 만나면.

main스레드는 작업 스레드들을 만들어 병렬로 코드를 실행
멀티 스레드 생성해 멀티 태스킹 수행

프로세스의 종료
싱글 스레드 : 메인 스레드가 종료하면 프로세스도 종료
멀티 스레드 : 실행 중인 스레드가 하나라도 있다면, 프로세스 미종료

멀티 스레드로 실행하는 어플리케이션 개발
몇개의 작업을 병렬로 실행할지부터 결정해야함.

작업 스레드 생성 방법
Thread 클래스로부터 직접 생성.
* Runnable 인터페이스를 매개값으로 갖는 Thread 생성자 호출

Thread 하위 클래스로부터 생성
Thread클래스 상속 후 run 메소드 재정의 해 스레드가 실행할 코드 작성.

동시성과 병렬성

동시성
멀티 작업을 위해 하나의 코어에서 멀티 스레드가 번갈아 가며 실행하느 ㄴ성질

병렬성
멀티작업을 위해 멀티코어에서 개별 스레드를 동시에 실행하는 성질

스레드 스케줄링
스레드의 개수가 코어의 수보다 많을 경우
스레드를 어떤 순서로 동시성으로 실행할 것인가 결정 -> 스레드 스케줄링
스케줄링에 의해 스레드들은 번갈아 가며 run() 메소드를 조금씩 실행

* 우선순위 방식과 순환 할당 방식 사용
* 우선순위 방식(코드로 제어가능)

우선 순위가 높은 스레드가 실행 상태를 더 많이 가지도록 스케줄링
1~10까지 값을 가질수있으면 기본은 5.

공유 객체를 사용할 때의 중의할 점
*멀티 스레드가 하나의 객체를 공유해서 생기는 오류

데몬 스레드

주 스레드의 작업을 돕는 보조적인 역할 수행하는 스레드
주 스레드가 종료되면 데몬 스레드는 강제적으로 자동 종료

스레드를 데몬 스레드로 만들기
주 스레드가 데몬이 될 스레드의 setDaemon(true) 호출
반드시 start() 메소드 호출 전에 setDaemon(true) 호출

현재 실행중인 스레드가 데몬 스레드인지 구별법
isDaemon() 메소드의 리턴값 조사 - true면 데몬 스레드


